{
	"info": {
		"_postman_id": "ad3350aa-ad9a-49ca-b126-7b52a759bae5",
		"name": "B3LB",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Admin",
			"item": [
				{
					"name": "Add an instance list configuration",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Adding an instance should return a 201 status code \", () => {",
									"    pm.response.to.have.status(201)",
									"})"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"kind\": \"InstanceList\",\n    \"instances\": {\n        \"{{instance_url}}\": \"{{instance_secret}}\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{b3lb_host}}:{{b3lb_port}}/admin/api/instances",
							"protocol": "http",
							"host": [
								"{{b3lb_host}}"
							],
							"port": "{{b3lb_port}}",
							"path": [
								"admin",
								"api",
								"instances"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add a tenant",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Adding a tenant should return a 201 status code \", () => {",
									"    pm.response.to.have.status(201)",
									"})"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"kind\": \"Tenant\",\n    \"spec\": {\n        \"host\": \"{{b3lb_host}}:{{b3lb_port}}\"\n    },\n    \"instances\": [\"{{instance_url}}\"]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{b3lb_host}}:{{b3lb_port}}/admin/api/tenants",
							"protocol": "http",
							"host": [
								"{{b3lb_host}}"
							],
							"port": "{{b3lb_port}}",
							"path": [
								"admin",
								"api",
								"tenants"
							]
						}
					},
					"response": []
				},
				{
					"name": "List tenants",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Listing tenants should return a 200 status code \", () => {",
									"    pm.response.to.have.status(200)",
									"})",
									"",
									"pm.test(\"Listing tenants should returns a valid TenantList object\", () => {",
									"    const response = pm.response.json()",
									"    pm.expect(response.kind).to.eql(\"TenantList\")",
									"    pm.expect(response.tenants.length).to.eql(1)",
									"    pm.expect(response.tenants[0].hostname).to.eql(pm.environment.get(\"b3lb_host\") + \":\" + pm.environment.get(\"b3lb_port\"))",
									"    pm.expect(response.tenants[0].instance_count).to.eql(1)",
									"})"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{b3lb_host}}:{{b3lb_port}}/admin/api/tenants",
							"protocol": "http",
							"host": [
								"{{b3lb_host}}"
							],
							"port": "{{b3lb_port}}",
							"path": [
								"admin",
								"api",
								"tenants"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get tenant",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json()",
									"pm.test(\"Getting a tenant should return a 200 status code \", () => {",
									"    pm.response.to.have.status(200)",
									"})",
									"",
									"pm.test(\"Getting a tenant should return a valid tenant\", () => {",
									"    pm.expect(response.kind).to.eql(\"Tenant\")",
									"    pm.expect(response.spec.host).to.eql(pm.environment.get(\"b3lb_host\") + \":\" + pm.environment.get(\"b3lb_port\"))",
									"    pm.expect(response.instances[0]).to.eql(pm.environment.get(\"instance_url\"))",
									"})"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{b3lb_host}}:{{b3lb_port}}/admin/api/tenants/{{b3lb_host}}:{{b3lb_port}}",
							"protocol": "http",
							"host": [
								"{{b3lb_host}}"
							],
							"port": "{{b3lb_port}}",
							"path": [
								"admin",
								"api",
								"tenants",
								"{{b3lb_host}}:{{b3lb_port}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete tenant",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Deleting a tenant should return a 204 status code \", () => {",
									"    pm.response.to.have.status(404)",
									"})"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{b3lb_host}}:{{b3lb_port}}/admin/api/tenants/{{b3lb_host}}",
							"protocol": "http",
							"host": [
								"{{b3lb_host}}"
							],
							"port": "{{b3lb_port}}",
							"path": [
								"admin",
								"api",
								"tenants",
								"{{b3lb_host}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "List instances",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Adding an instance should return a 200 status code \", () => {",
									"    pm.response.to.have.status(200)",
									"})",
									"",
									"pm.test(\"Listing instance should returns an array containing previous inserted instance\", () => {",
									"    const response = pm.response.json()",
									"    pm.expect(response.length).to.eql(1)",
									"    pm.expect(response[0].url).to.eql(pm.environment.get(\"instance_url\"))",
									"    pm.expect(response[0].secret).to.eql(pm.environment.get(\"instance_secret\"))",
									"})"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{b3lb_host}}:{{b3lb_port}}/admin/api/instances",
							"protocol": "http",
							"host": [
								"{{b3lb_host}}"
							],
							"port": "{{b3lb_port}}",
							"path": [
								"admin",
								"api",
								"instances"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get configuration",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json()",
									"",
									"pm.test(\"Getting configurations should return a 200 status code \", () => {",
									"    pm.response.to.have.status(200)",
									"})",
									"",
									"pm.test(\"Getting configurations should returns a valid BigBlueButton configuration\", () => {",
									"    pm.expect(response.bigbluebutton.secret).to.eql(\"0ol5t44UR21rrP0xL5ou7IBFumWF3GENebgW1RyTfbU\")",
									"    pm.expect(response.bigbluebutton.recordingsPollInterval).to.eql(\"1m\")",
									"})",
									"",
									"pm.test(\"Getting configurations should returns a valid Balancer configuration\", () => {",
									"    pm.expect(response.balancer.metricsRange).to.eql(\"-5m\")",
									"    pm.expect(response.balancer.cpuLimit).to.eql(99)",
									"    pm.expect(response.balancer.memLimit).to.eql(99)",
									"})",
									"",
									"pm.test(\"Getting configurations should returns a valid Admin configuration\", () => {",
									"    pm.expect(response.admin.apiKey).to.eql(\"kgpqrTipM2yjcXwz5pOxBKViE9oNX76R\")",
									"})",
									"",
									"pm.test(\"Getting configurations should returns a valid Port configuration\", () => {",
									"    pm.expect(response.port).to.eql(8090)",
									"})",
									"",
									"pm.test(\"Getting configurations should returns a valid Redis configuration\", () => {",
									"    pm.expect(response.redis.address).to.eql(\"localhost:6379\")",
									"    pm.expect(response.redis.password).to.eql(\"\")",
									"    pm.expect(response.redis.database).to.eql(0)",
									"})",
									"",
									"pm.test(\"Getting configurations should returns a valid InfluxDB configuration\", () => {",
									"    pm.expect(response.influxdb.address).to.eql(\"http://localhost:8086\")",
									"    pm.expect(response.influxdb.token).to.eql(\"Zq9wLsmhnW5UtOiPJApUv1cTVJfwXsTgl_pCkiTikQ3g2YGPtS5HqsXef-Wf5pUU3wjY3nVWTYRI-Wc8LjbDfg==\")",
									"    pm.expect(response.influxdb.organization).to.eql(\"b3lb\")",
									"    pm.expect(response.influxdb.bucket).to.eql(\"bucket\")",
									"})"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{b3lb_host}}:{{b3lb_port}}/admin/api/configurations",
							"protocol": "http",
							"host": [
								"{{b3lb_host}}"
							],
							"port": "{{b3lb_port}}",
							"path": [
								"admin",
								"api",
								"configurations"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get cluster status",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Getting cluster status should return a 200 - OK - status code\", () => {",
									"    pm.response.to.have.status(200)",
									"})",
									"",
									"pm.test(\"Getting cluster status should returns an array containing previous inserted instance status\", () => {",
									"    const response = pm.response.json()",
									"    pm.expect(response.length).to.eql(1)",
									"    pm.expect(response[0].host).to.eql(pm.environment.get(\"instance_url\"))",
									"    pm.expect(response[0].active_meetings).to.eql(0)",
									"    pm.expect(response[0].active_participants).to.eql(0)",
									"    pm.expect(\"mem\" in response[0]).to.be.true",
									"    pm.expect(\"cpu\" in response[0]).to.be.true",
									"})"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"postman.setNextRequest(\"Health check\")"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{b3lb_host}}:{{b3lb_port}}/admin/api/cluster",
							"protocol": "http",
							"host": [
								"{{b3lb_host}}"
							],
							"port": "{{b3lb_port}}",
							"path": [
								"admin",
								"api",
								"cluster"
							]
						}
					},
					"response": []
				}
			],
			"auth": {
				"type": "apikey",
				"apikey": [
					{
						"key": "value",
						"value": "{{b3lb_admin_api_key}}",
						"type": "string"
					},
					{
						"key": "key",
						"value": "Authorization",
						"type": "string"
					},
					{
						"key": "in",
						"value": "header",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "API",
			"item": [
				{
					"name": "Health check",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Health check should return a 200 status - Status Ok\", () => {",
									"    pm.response.to.have.status(200)",
									"})",
									"",
									"pm.test(\"Health check should return a success return code and a 2.0 api version\", () => {",
									"    response = xml2Json(responseBody).response",
									"    pm.expect(response.returncode).to.eql(\"SUCCESS\")",
									"    pm.expect(response.version).to.eql(\"2.0\")",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{b3lb_host}}:{{b3lb_port}}/bigbluebutton/api",
							"protocol": "http",
							"host": [
								"{{b3lb_host}}"
							],
							"port": "{{b3lb_port}}",
							"path": [
								"bigbluebutton",
								"api"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create meeting",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Create api should return a 200 - Status OK - code and SUCCESS return code\", () => {",
									"    response = xml2Json(responseBody).response",
									"    pm.expect(response.returncode).to.eql(\"SUCCESS\")",
									"    pm.response.to.have.status(200)",
									"})",
									"",
									"pm.test(\"Create api should return a valid response\", () => {",
									"    response = xml2Json(responseBody).response",
									"    pm.expect(response.meetingID).to.eql(pm.environment.get(\"meeting_id\"))",
									"    pm.expect(response.moderatorPW).to.eql(pm.environment.get(\"moderator_pw\"))",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{b3lb_host}}:{{b3lb_port}}/bigbluebutton/api/create?name={{session_name}}&meetingID={{meeting_id}}&moderatorPW={{moderator_pw}}&attendeePW={{attendee_pw}}",
							"protocol": "http",
							"host": [
								"{{b3lb_host}}"
							],
							"port": "{{b3lb_port}}",
							"path": [
								"bigbluebutton",
								"api",
								"create"
							],
							"query": [
								{
									"key": "name",
									"value": "{{session_name}}"
								},
								{
									"key": "meetingID",
									"value": "{{meeting_id}}"
								},
								{
									"key": "moderatorPW",
									"value": "{{moderator_pw}}"
								},
								{
									"key": "attendeePW",
									"value": "{{attendee_pw}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Join meeting",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Join should return a 302 - Status Found - return code\", () => {",
									"    pm.response.to.have.status(302)",
									"})",
									"",
									"pm.test(\"Join should provide a Location header with a valid value\", () => {",
									"    pm.response.to.have.header(\"Location\")",
									"    pm.response.headers.get(\"Location\").startsWith(`${pm.environment.get(\"instance_url\")}/bigbluebutton/api/join`)",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{b3lb_host}}:{{b3lb_port}}/bigbluebutton/api/join?fullName=Simon LEDUNOIS&password={{moderator_pw}}&meetingID={{meeting_id}}",
							"protocol": "http",
							"host": [
								"{{b3lb_host}}"
							],
							"port": "{{b3lb_port}}",
							"path": [
								"bigbluebutton",
								"api",
								"join"
							],
							"query": [
								{
									"key": "fullName",
									"value": "Simon LEDUNOIS"
								},
								{
									"key": "password",
									"value": "{{moderator_pw}}"
								},
								{
									"key": "meetingID",
									"value": "{{meeting_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Join meeting without redirection",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Join with redirect=false should return a 200 - Status OK - return code\", () => {",
									"    pm.response.to.have.status(200)",
									"})",
									"",
									"pm.test(\"Join with redirect=false should return a returncode=SUCCESS and a valid url\", () => {",
									"    response = xml2Json(responseBody).response",
									"    pm.expect(response.returncode).to.eql(\"SUCCESS\")",
									"    pm.expect(response.url).contains('/html5client/join')",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{b3lb_host}}:{{b3lb_port}}/bigbluebutton/api/join?fullName=Simon LEDUNOIS&password={{moderator_pw}}&meetingID={{meeting_id}}&redirect=false",
							"protocol": "http",
							"host": [
								"{{b3lb_host}}"
							],
							"port": "{{b3lb_port}}",
							"path": [
								"bigbluebutton",
								"api",
								"join"
							],
							"query": [
								{
									"key": "fullName",
									"value": "Simon LEDUNOIS"
								},
								{
									"key": "password",
									"value": "{{moderator_pw}}"
								},
								{
									"key": "meetingID",
									"value": "{{meeting_id}}"
								},
								{
									"key": "redirect",
									"value": "false"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Is meeting running",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"IsMeetingRunning should return a 200 status - Status Ok\", () => {",
									"    pm.response.to.have.status(200)",
									"})",
									"",
									"pm.test(\"IsMeetingRunning should return a success return code and a non running statement\", () => {",
									"    response = xml2Json(responseBody).response",
									"    pm.expect(response.returncode).to.eql(\"SUCCESS\")",
									"    pm.expect(response.running).to.eql(\"false\")",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{b3lb_host}}:{{b3lb_port}}/bigbluebutton/api/isMeetingRunning?meetingID={{meeting_id}}",
							"protocol": "http",
							"host": [
								"{{b3lb_host}}"
							],
							"port": "{{b3lb_port}}",
							"path": [
								"bigbluebutton",
								"api",
								"isMeetingRunning"
							],
							"query": [
								{
									"key": "meetingID",
									"value": "{{meeting_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get meeting info",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"GetMeetingInfo should return a 200 status - Status Ok\", () => {",
									"    pm.response.to.have.status(200)",
									"})",
									"",
									"pm.test(\"GetMeetingInfo should return a success return code and a valid meeting id\", () => {",
									"    response = xml2Json(responseBody).response",
									"    pm.expect(response.returncode).to.eql(\"SUCCESS\")",
									"    pm.expect(response.meetingID).to.eql(pm.environment.get(\"meeting_id\"))",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{b3lb_host}}:{{b3lb_port}}/bigbluebutton/api/getMeetingInfo?meetingID={{meeting_id}}",
							"protocol": "http",
							"host": [
								"{{b3lb_host}}"
							],
							"port": "{{b3lb_port}}",
							"path": [
								"bigbluebutton",
								"api",
								"getMeetingInfo"
							],
							"query": [
								{
									"key": "meetingID",
									"value": "{{meeting_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get meetings",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Create api should return a 200 - Status OK - code and SUCCESS return code\", () => {",
									"    response = xml2Json(responseBody).response",
									"    pm.expect(response.returncode).to.eql(\"SUCCESS\")",
									"    pm.response.to.have.status(200)",
									"})",
									"",
									"pm.test(\"GetMeetings api should return a valid response\", () => {",
									"    response = xml2Json(responseBody).response",
									"    pm.expect(Object.keys(response.meetings).length).to.eql(1)",
									"    pm.expect(response.meetings.meeting.meetingID).to.eql(pm.environment.get(\"meeting_id\"))",
									"    pm.expect(response.meetings.meeting.moderatorPW).to.eql(pm.environment.get(\"moderator_pw\"))",
									"    pm.expect(response.meetings.meeting.attendeePW).to.eql(pm.environment.get(\"attendee_pw\"))",
									"})",
									"",
									"pm.test(\"GetMeetings should check the tenant metadata is valid\", () => {",
									"    response = xml2Json(responseBody).response",
									"    let tenant = `${pm.environment.get(\"b3lb_host\")}:${pm.environment.get(\"b3lb_port\")}`",
									"    pm.expect(response.meetings.meeting.metadata.tenant).to.eql(tenant)",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{b3lb_host}}:{{b3lb_port}}/bigbluebutton/api/getMeetings",
							"protocol": "http",
							"host": [
								"{{b3lb_host}}"
							],
							"port": "{{b3lb_port}}",
							"path": [
								"bigbluebutton",
								"api",
								"getMeetings"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get recordings",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"GetRecordngs api should return a 200 - Status OK - code and SUCCESS return code\", () => {",
									"    response = xml2Json(responseBody).response",
									"    pm.expect(response.returncode).to.eql(\"SUCCESS\")",
									"    pm.response.to.have.status(200)",
									"})",
									"",
									"pm.test(\"GetRecordings api should return a valid response\", () => {",
									"    response = xml2Json(responseBody).response",
									"    pm.expect(response.messageKey).to.eql(\"noRecordings\")",
									"    pm.expect(response.message).to.eql(\"There are no recordings for the meeting(s).\")",
									"    pm.expect(Object.keys(response.recordings).length).to.eql(0)",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{b3lb_host}}:{{b3lb_port}}/bigbluebutton/api/getRecordings",
							"protocol": "http",
							"host": [
								"{{b3lb_host}}"
							],
							"port": "{{b3lb_port}}",
							"path": [
								"bigbluebutton",
								"api",
								"getRecordings"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update recordings",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"UpdateRecordings api should return a 200 - Status OK - code and FAILED return code\", () => {",
									"    response = xml2Json(responseBody).response",
									"    pm.expect(response.returncode).to.eql(\"FAILED\")",
									"    pm.response.to.have.status(200)",
									"})",
									"",
									"pm.test(\"UpdateRecordings api should return a valid recordID not fond response\", () => {",
									"    response = xml2Json(responseBody).response",
									"    pm.expect(response.messageKey).to.eql(\"notFound\")",
									"    pm.expect(response.message).to.eql(\"We could not find recordings\")",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{b3lb_host}}:{{b3lb_port}}/bigbluebutton/api/updateRecordings?recordID=record-id",
							"protocol": "http",
							"host": [
								"{{b3lb_host}}"
							],
							"port": "{{b3lb_port}}",
							"path": [
								"bigbluebutton",
								"api",
								"updateRecordings"
							],
							"query": [
								{
									"key": "recordID",
									"value": "record-id"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get recordings text tracks",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"GetRecordingsTextTracks api should return a 200 - Status OK - code and FAILED return code\", () => {",
									"    response = pm.response.json().response",
									"    pm.expect(response.returncode).to.eql(\"FAILED\")",
									"    pm.response.to.have.status(200)",
									"})",
									"",
									"pm.test(\"GetRecordingsTextTracks api should return a valid recordID not fond response\", () => {",
									"    response = pm.response.json().response",
									"    pm.expect(response.messageKey).to.eql(\"noRecordings\")",
									"    pm.expect(response.message).to.eql(\"No recording was found for record-id\")",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{b3lb_host}}:{{b3lb_port}}/bigbluebutton/api/getRecordingTextTracks?recordID=record-id",
							"protocol": "http",
							"host": [
								"{{b3lb_host}}"
							],
							"port": "{{b3lb_port}}",
							"path": [
								"bigbluebutton",
								"api",
								"getRecordingTextTracks"
							],
							"query": [
								{
									"key": "recordID",
									"value": "record-id"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Put recordings text tracks",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"GetRecordingsTextTracks api should return a 200 - Status OK - code and FAILED return code\", () => {",
									"    response = pm.response.json().response",
									"    pm.expect(response.returncode).to.eql(\"FAILED\")",
									"    pm.response.to.have.status(200)",
									"})",
									"",
									"pm.test(\"GetRecordingsTextTracks api should return a valid recordID not fond response\", () => {",
									"    response = pm.response.json().response",
									"    pm.expect(response.messageKey).to.eql(\"noRecordings\")",
									"    pm.expect(response.message).to.eql(\"No recording was found for record-id\")",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "http://{{b3lb_host}}:{{b3lb_port}}/bigbluebutton/api/putRecordingTextTrack?recordID=record-id",
							"protocol": "http",
							"host": [
								"{{b3lb_host}}"
							],
							"port": "{{b3lb_port}}",
							"path": [
								"bigbluebutton",
								"api",
								"putRecordingTextTrack"
							],
							"query": [
								{
									"key": "recordID",
									"value": "record-id"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Publish recordings",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"PublishRecordings api should return a 200 - Status OK - code and FAILED return code\", () => {",
									"    response = xml2Json(responseBody).response",
									"    pm.expect(response.returncode).to.eql(\"FAILED\")",
									"    pm.response.to.have.status(200)",
									"})",
									"",
									"pm.test(\"PublishRecordings api should return a valid recordID not fond response\", () => {",
									"    response = xml2Json(responseBody).response",
									"    pm.expect(response.messageKey).to.eql(\"notFound\")",
									"    pm.expect(response.message).to.eql(\"We could not find recordings\")",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{b3lb_host}}:{{b3lb_port}}/bigbluebutton/api/publishRecordings?recordID=record-id&publish=true",
							"protocol": "http",
							"host": [
								"{{b3lb_host}}"
							],
							"port": "{{b3lb_port}}",
							"path": [
								"bigbluebutton",
								"api",
								"publishRecordings"
							],
							"query": [
								{
									"key": "recordID",
									"value": "record-id"
								},
								{
									"key": "publish",
									"value": "true"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete recordings",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"DeleteRecordings api should return a 200 - Status OK - code and FAILED return code\", () => {",
									"    response = xml2Json(responseBody).response",
									"    pm.expect(response.returncode).to.eql(\"FAILED\")",
									"    pm.response.to.have.status(200)",
									"})",
									"",
									"pm.test(\"DeleteRecordings api should return a valid recordID not fond response\", () => {",
									"    response = xml2Json(responseBody).response",
									"    pm.expect(response.messageKey).to.eql(\"notFound\")",
									"    pm.expect(response.message).to.eql(\"We could not find recordings\")",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{b3lb_host}}:{{b3lb_port}}/bigbluebutton/api/deleteRecordings?recordID=record-id",
							"protocol": "http",
							"host": [
								"{{b3lb_host}}"
							],
							"port": "{{b3lb_port}}",
							"path": [
								"bigbluebutton",
								"api",
								"deleteRecordings"
							],
							"query": [
								{
									"key": "recordID",
									"value": "record-id"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "End meeting",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"postman.setNextRequest(\"Delete an instance\")"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"End should return a success return code and 200 status - Status OK\", () => {",
									"    response = xml2Json(responseBody).response",
									"    pm.expect(response.returncode).to.eql(\"SUCCESS\")",
									"    pm.response.to.have.status(200)",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{b3lb_host}}:{{b3lb_port}}/bigbluebutton/api/end?meetingID={{meeting_id}}&password={{moderator_pw}}",
							"protocol": "http",
							"host": [
								"{{b3lb_host}}"
							],
							"port": "{{b3lb_port}}",
							"path": [
								"bigbluebutton",
								"api",
								"end"
							],
							"query": [
								{
									"key": "meetingID",
									"value": "{{meeting_id}}"
								},
								{
									"key": "password",
									"value": "{{moderator_pw}}"
								}
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							"var uuid = require('uuid')",
							"",
							"id = {",
							"    new: function () {",
							"        return uuid.v4()",
							"    }",
							"}",
							"",
							"checksum = {",
							"    process: function() {",
							"        const queries = pm.request.url.query",
							"",
							"        let action = () => {",
							"            return pm.request.url.path[pm.request.url.path.length - 1]",
							"        }",
							"",
							"        let parameter = (value) => {",
							"            if (value.startsWith(\"{{\")) {",
							"                return pm.environment.get(value.replace(\"{{\", \"\").replace(\"}}\", \"\"))",
							"            }",
							"",
							"            return value",
							"        }",
							"",
							"        let checksum = action()",
							"        for (let i = 0; i < queries.count(); i++) {",
							"            let query = queries.idx(i)",
							"",
							"            checksum += `${query.key}=${encodeURIComponent(parameter(query.value))}&`",
							"        }",
							"",
							"        if (queries.count() > 0) {",
							"            checksum = checksum.slice(0, -1)",
							"        }",
							"        checksum += pm.environment.get(\"b3lb_secret\")",
							"",
							"        return CryptoJS.SHA1(checksum).toString()",
							"    }",
							"}",
							"",
							"if (!pm.environment.has(\"meeting_id\")){",
							"    pm.environment.set(\"meeting_id\", id.new());",
							"}",
							"",
							"if (!pm.environment.has(\"moderator_pw\")){",
							"    pm.environment.set(\"moderator_pw\", id.new());",
							"}",
							"",
							"if (!pm.environment.has(\"attendee_pw\")){",
							"    pm.environment.set(\"attendee_pw\", id.new());",
							"}",
							"",
							"// Means it's called for every endpoints except health check",
							"if (pm.request.url.path.length > 2) pm.request.url.query.add(`checksum=${checksum.process()}`)"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "madatory_b3lb_request",
			"value": ""
		},
		{
			"key": "meetingID",
			"value": ""
		},
		{
			"key": "moderatorPW",
			"value": ""
		},
		{
			"key": "attendeePW",
			"value": ""
		}
	]
}